/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is automatically generated. Do not modify it.

import {CorePalette} from '../palettes/core_palette';

/**
 * DEPRECATED. The `Scheme` class is deprecated in favor of `DynamicScheme`.
 * Please see
 * https://github.com/material-foundation/material-color-utilities/blob/main/make_schemes.md
 * for migration guidance.
 *
 * Represents a Material color scheme, a mapping of color roles to colors.
 */
export class Scheme {
  get primary(): number {
    return this.props.primary;
  }

  get primaryForeground(): number {
    return this.props.primaryForeground;
  }

  get card(): number {
    return this.props.card;
  }

  get cardForeground(): number {
    return this.props.cardForeground;
  }

  get secondary(): number {
    return this.props.secondary;
  }

  get secondaryForeground(): number {
    return this.props.secondaryForeground;
  }

  get popover(): number {
    return this.props.popover;
  }

  get popoverForeground(): number {
    return this.props.popoverForeground;
  }

  get accent(): number {
    return this.props.accent;
  }

  get accentForeground(): number {
    return this.props.accentForeground;
  }

  get sidebarPrimary(): number {
    return this.props.sidebarPrimary;
  }

  get sidebarPrimaryForeground(): number {
    return this.props.sidebarPrimaryForeground;
  }

  get destructive(): number {
    return this.props.destructive;
  }

  get destructiveForeground(): number {
    return this.props.destructiveForeground;
  }

  get chart1(): number {
    return this.props.chart1;
  }

  get chart2(): number {
    return this.props.chart2;
  }

  get chart3(): number {
    return this.props.chart3;
  }

  get chart4(): number {
    return this.props.chart4;
  }

  get chart5(): number {
    return this.props.chart5;
  }

  get background(): number {
    return this.props.background;
  }

  get foreground(): number {
    return this.props.foreground;
  }

  get sidebarAccent(): number {
    return this.props.sidebarAccent;
  }

  get sidebarAccentForeground(): number {
    return this.props.sidebarAccentForeground;
  }

  get sidebarBackground(): number {
    return this.props.sidebarBackground;
  }

  get sidebarForeground(): number {
    return this.props.sidebarForeground;
  }

  get border(): number {
    return this.props.border;
  }

  get input(): number {
    return this.props.input;
  }

  get sidebarBorder(): number {
    return this.props.sidebarBorder;
  }

  get ring(): number {
    return this.props.ring;
  }

  get muted(): number {
    return this.props.muted;
  }

  get mutedForeground(): number {
    return this.props.mutedForeground;
  }

  get sidebarRing(): number {
    return this.props.sidebarRing;
  }

  /**
   * @param argb ARGB representation of a color.
   * @return Light Material color scheme, based on the color's hue.
   */
  static light(argb: number): Scheme {
    return Scheme.lightFromCorePalette(CorePalette.of(argb));
  }

  /**
   * @param argb ARGB representation of a color.
   * @return Dark Material color scheme, based on the color's hue.
   */
  static dark(argb: number): Scheme {
    return Scheme.darkFromCorePalette(CorePalette.of(argb));
  }

  /**
   * @param argb ARGB representation of a color.
   * @return Light Material content color scheme, based on the color's hue.
   */
  static lightContent(argb: number): Scheme {
    return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));
  }

  /**
   * @param argb ARGB representation of a color.
   * @return Dark Material content color scheme, based on the color's hue.
   */
  static darkContent(argb: number): Scheme {
    return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));
  }

  /**
   * Light scheme from core palette
   */
  static lightFromCorePalette(core: CorePalette): Scheme {
    return new Scheme({
      background: core.n1.tone(99),
      foreground: core.n1.tone(10),

      card: core.a1.tone(90),
      cardForeground: core.a1.tone(10),

      popover: core.a2.tone(90),
      popoverForeground: core.a2.tone(10),

      primary: core.a1.tone(40),
      primaryForeground: core.a1.tone(100),

      secondary: core.a2.tone(40),
      secondaryForeground: core.a2.tone(100),

      muted: core.n1.tone(20),
      mutedForeground: core.n1.tone(95),

      accent: core.a3.tone(40),
      accentForeground: core.a3.tone(100),

      destructive: core.error.tone(40),
      destructiveForeground: core.error.tone(100),

      border: core.n2.tone(50),
      input: core.n2.tone(80),
      ring: core.n1.tone(0),

      chart1: core.a1.tone(50),
      chart2: core.a2.tone(50),
      chart3: core.a3.tone(50),
      chart4: core.n1.tone(50),
      chart5: core.n2.tone(50),

      sidebarBackground: core.n2.tone(90),
      sidebarForeground: core.n2.tone(30),
      sidebarPrimary: core.a3.tone(90),
      sidebarPrimaryForeground: core.a3.tone(10),
      sidebarAccent: core.n1.tone(99),
      sidebarAccentForeground: core.n1.tone(10),
      sidebarBorder: core.n1.tone(0),
      sidebarRing: core.a1.tone(80)
    });
  }

  /**
   * Dark scheme from core palette
   */
  static darkFromCorePalette(core: CorePalette): Scheme {
    return new Scheme({
      background: core.n1.tone(10),
      foreground: core.n1.tone(90),

      card: core.a1.tone(30),
      cardForeground: core.a1.tone(90),

      popover: core.a2.tone(30),
      popoverForeground: core.a2.tone(90),

      primary: core.a1.tone(80),
      primaryForeground: core.a1.tone(20),

      secondary: core.a2.tone(80),
      secondaryForeground: core.a2.tone(20),

      muted: core.n1.tone(90),
      mutedForeground: core.a1.tone(99),

      accent: core.a3.tone(80),
      accentForeground: core.a3.tone(20),

      destructive: core.error.tone(80),
      destructiveForeground: core.error.tone(20),

      border: core.n2.tone(60),
      input: core.n2.tone(30),
      ring: core.n1.tone(0),

      chart1: core.a1.tone(70),
      chart2: core.a2.tone(70),
      chart3: core.a3.tone(70),
      chart4: core.n1.tone(70),
      chart5: core.n2.tone(70),

      sidebarPrimary: core.a3.tone(30),
      sidebarPrimaryForeground: core.a3.tone(90),
      sidebarBackground: core.n2.tone(30),
      sidebarForeground: core.n2.tone(80),
      sidebarAccent: core.n1.tone(10),
      sidebarAccentForeground: core.n1.tone(90),
      sidebarBorder: core.n1.tone(0),
      sidebarRing: core.n2.tone(99)
    });
  }

  private constructor(private readonly props: {
    background: number,
    foreground: number,

    card: number,
    cardForeground: number,

    popover: number,
    popoverForeground: number,

    primary: number,
    primaryForeground: number,

    secondary: number,
    secondaryForeground: number,

    muted: number,
    mutedForeground: number,

    accent: number,
    accentForeground: number,

    destructive: number,
    destructiveForeground: number,

    border: number,
    input: number,
    ring: number,

    chart1: number,
    chart2: number,
    chart3: number,
    chart4: number,
    chart5: number,

    sidebarBackground: number,
    sidebarForeground: number,
    sidebarPrimary: number,
    sidebarPrimaryForeground: number,
    sidebarAccent: number,
    sidebarAccentForeground: number,
    sidebarBorder: number,
    sidebarRing: number
  }) {}

  toJSON() {
    return {
      ...this.props
    };
  }
}

