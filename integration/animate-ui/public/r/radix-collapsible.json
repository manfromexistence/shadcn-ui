{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radix-collapsible",
  "type": "registry:ui",
  "title": "Collapsible",
  "description": "Collapsible component",
  "dependencies": [
    "motion",
    "@radix-ui/react-collapsible"
  ],
  "files": [
    {
      "path": "registry/radix/radix-collapsible/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport {\n  AnimatePresence,\n  motion,\n  type HTMLMotionProps,\n  type Transition,\n} from 'motion/react';\n\ninterface CollapsibleContextType {\n  isOpen: boolean;\n}\nconst CollapsibleContext = React.createContext<CollapsibleContextType>({\n  isOpen: false,\n});\n\nconst useCollapsible = (): CollapsibleContextType => {\n  const context = React.useContext(CollapsibleContext);\n  if (!context) {\n    throw new Error('useCollapsible must be used within a Collapsible');\n  }\n  return context;\n};\n\ntype CollapsibleProps = React.ComponentPropsWithoutRef<\n  typeof CollapsiblePrimitive.Root\n>;\nconst Collapsible: React.FC<CollapsibleProps> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  React.useEffect(() => {\n    if (props?.open !== undefined) setIsOpen(props.open);\n  }, [props?.open]);\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <CollapsibleContext.Provider value={{ isOpen }}>\n      <CollapsiblePrimitive.Root {...props} onOpenChange={handleOpenChange}>\n        {children}\n      </CollapsiblePrimitive.Root>\n    </CollapsibleContext.Provider>\n  );\n};\n\ntype CollapsibleTriggerProps = React.ComponentPropsWithoutRef<\n  typeof CollapsiblePrimitive.Trigger\n>;\nconst CollapsibleTrigger = CollapsiblePrimitive.Trigger;\n\ntype CollapsibleContentProps = React.ComponentPropsWithoutRef<\n  typeof CollapsiblePrimitive.Content\n> &\n  HTMLMotionProps<'div'> & {\n    transition?: Transition;\n  };\nconst CollapsibleContent = React.forwardRef<\n  React.ElementRef<typeof CollapsiblePrimitive.Content>,\n  CollapsibleContentProps\n>(\n  (\n    {\n      className,\n      children,\n      transition = { type: 'spring', stiffness: 150, damping: 22 },\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = useCollapsible();\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <CollapsiblePrimitive.Content asChild forceMount ref={ref} {...props}>\n            <motion.div\n              key=\"collapsible-content\"\n              layout\n              initial={{ opacity: 0, height: 0, overflow: 'hidden' }}\n              animate={{ opacity: 1, height: 'auto', overflow: 'hidden' }}\n              exit={{ opacity: 0, height: 0, overflow: 'hidden' }}\n              transition={transition}\n              className={className}\n              {...props}\n            >\n              {children}\n            </motion.div>\n          </CollapsiblePrimitive.Content>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nCollapsibleContent.displayName = CollapsiblePrimitive.Content.displayName;\n\nexport {\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  useCollapsible,\n  type CollapsibleContextType,\n  type CollapsibleProps,\n  type CollapsibleTriggerProps,\n  type CollapsibleContentProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/radix-collapsible.tsx"
    }
  ]
}