{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radix-dropdown-menu",
  "type": "registry:ui",
  "title": "Dropdown Menu",
  "description": "Dropdown Menu component",
  "dependencies": [
    "motion",
    "lucide-react",
    "@radix-ui/react-dropdown-menu"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/motion-highlight"
  ],
  "files": [
    {
      "path": "registry/radix/radix-dropdown-menu/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport { Check, ChevronRight, Circle } from 'lucide-react';\nimport {\n  AnimatePresence,\n  motion,\n  type HTMLMotionProps,\n  type Transition,\n} from 'motion/react';\n\nimport { cn } from '@/lib/utils';\nimport {\n  MotionHighlight,\n  MotionHighlightItem,\n} from '@/components/animate-ui/motion-highlight';\n\ninterface DropdownMenuContextType {\n  isOpen: boolean;\n  highlightTransition: Transition;\n}\nconst DropdownMenuContext = React.createContext<DropdownMenuContextType>({\n  isOpen: false,\n  highlightTransition: { type: 'spring', stiffness: 200, damping: 25 },\n});\n\nconst useDropdownMenu = (): DropdownMenuContextType => {\n  const context = React.useContext(DropdownMenuContext);\n  if (!context) {\n    throw new Error('useDropdownMenu must be used within a DropdownMenu');\n  }\n  return context;\n};\n\ntype DropdownMenuProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.Root\n> & {\n  transition?: Transition;\n};\nconst DropdownMenu: React.FC<DropdownMenuProps> = ({\n  children,\n  transition = { type: 'spring', stiffness: 200, damping: 25 },\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  React.useEffect(() => {\n    if (props?.open !== undefined) setIsOpen(props.open);\n  }, [props?.open]);\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <DropdownMenuContext.Provider\n      value={{ isOpen, highlightTransition: transition }}\n    >\n      <DropdownMenuPrimitive.Root {...props} onOpenChange={handleOpenChange}>\n        {children}\n      </DropdownMenuPrimitive.Root>\n    </DropdownMenuContext.Provider>\n  );\n};\n\ntype DropdownMenuTriggerProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.Trigger\n>;\nconst DropdownMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Trigger>,\n  DropdownMenuTriggerProps\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Trigger ref={ref} className={className} {...props} />\n));\nDropdownMenuTrigger.displayName = DropdownMenuPrimitive.Trigger.displayName;\n\ntype DropdownMenuGroupProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.Group\n>;\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\ntype DropdownMenuPortalProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.Portal\n>;\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\ntype DropdownMenuSubProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.Sub\n>;\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\ntype DropdownMenuRadioGroupProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.RadioGroup\n>;\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\ntype DropdownMenuSubTriggerProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.SubTrigger\n> & {\n  inset?: boolean;\n};\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  DropdownMenuSubTriggerProps\n>(({ className, children, inset, disabled, ...props }, ref) => (\n  <MotionHighlightItem disabled={disabled}>\n    <DropdownMenuPrimitive.SubTrigger ref={ref} {...props} disabled={disabled}>\n      <motion.span\n        data-disabled={disabled}\n        whileTap={{ scale: 0.95 }}\n        className={cn(\n          'relative z-[1] flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n          inset && 'pl-8',\n          className,\n        )}\n      >\n        {children}\n        <ChevronRight className=\"ml-auto\" />\n      </motion.span>\n    </DropdownMenuPrimitive.SubTrigger>\n  </MotionHighlightItem>\n));\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName;\n\ntype DropdownMenuSubContentProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.SubContent\n>;\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  DropdownMenuSubContentProps\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]',\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName;\n\ntype DropdownMenuContentProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.Content\n> &\n  HTMLMotionProps<'div'> & {\n    transition?: Transition;\n  };\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  DropdownMenuContentProps\n>(\n  (\n    {\n      className,\n      children,\n      sideOffset = 4,\n      transition = { duration: 0.2 },\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen, highlightTransition } = useDropdownMenu();\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <DropdownMenuPrimitive.Portal forceMount>\n            <DropdownMenuPrimitive.Content\n              ref={ref}\n              sideOffset={sideOffset}\n              asChild\n              {...props}\n            >\n              <motion.div\n                key=\"dropdown-menu\"\n                className={cn(\n                  'z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]',\n                  className,\n                )}\n                initial={{\n                  opacity: 0,\n                  scale: 0.95,\n                }}\n                animate={{\n                  opacity: 1,\n                  scale: 1,\n                }}\n                exit={{\n                  opacity: 0,\n                  scale: 0.95,\n                }}\n                transition={transition}\n                style={{ willChange: 'opacity, transform' }}\n                {...props}\n              >\n                <MotionHighlight\n                  hover\n                  className=\"rounded-sm\"\n                  controlledItems\n                  transition={highlightTransition}\n                >\n                  {children}\n                </MotionHighlight>\n              </motion.div>\n            </DropdownMenuPrimitive.Content>\n          </DropdownMenuPrimitive.Portal>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\ntype DropdownMenuItemProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.Item\n> & {\n  inset?: boolean;\n};\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  DropdownMenuItemProps\n>(({ className, children, inset, disabled, ...props }, ref) => {\n  return (\n    <MotionHighlightItem disabled={disabled}>\n      <DropdownMenuPrimitive.Item ref={ref} {...props} disabled={disabled}>\n        <motion.span\n          data-disabled={disabled}\n          whileTap={{ scale: 0.95 }}\n          className={cn(\n            'relative z-[1] flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus-visible:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',\n            inset && 'pl-8',\n            className,\n          )}\n        >\n          {children}\n        </motion.span>\n      </DropdownMenuPrimitive.Item>\n    </MotionHighlightItem>\n  );\n});\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\ntype DropdownMenuCheckboxItemProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.CheckboxItem\n>;\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  DropdownMenuCheckboxItemProps\n>(({ className, children, checked, disabled, ...props }, ref) => {\n  return (\n    <MotionHighlightItem disabled={disabled}>\n      <DropdownMenuPrimitive.CheckboxItem\n        ref={ref}\n        {...props}\n        checked={checked}\n        disabled={disabled}\n      >\n        <motion.span\n          data-disabled={disabled}\n          whileTap={{ scale: 0.95 }}\n          className={cn(\n            'relative z-[1] flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus-visible:bg-accent focus-visible:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n            className,\n          )}\n        >\n          <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n            <DropdownMenuPrimitive.ItemIndicator>\n              <Check className=\"h-4 w-4\" />\n            </DropdownMenuPrimitive.ItemIndicator>\n          </span>\n          {children}\n        </motion.span>\n      </DropdownMenuPrimitive.CheckboxItem>\n    </MotionHighlightItem>\n  );\n});\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName;\n\ntype DropdownMenuRadioItemProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.RadioItem\n>;\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  DropdownMenuRadioItemProps\n>(({ className, children, disabled, ...props }, ref) => {\n  return (\n    <MotionHighlightItem disabled={disabled}>\n      <DropdownMenuPrimitive.RadioItem ref={ref} {...props} disabled={disabled}>\n        <motion.span\n          data-disabled={disabled}\n          whileTap={{ scale: 0.95 }}\n          className={cn(\n            'relative z-[1] flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus-visible:bg-accent focus-visible:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n            className,\n          )}\n        >\n          <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n            <DropdownMenuPrimitive.ItemIndicator>\n              <Circle className=\"h-2 w-2 fill-current\" />\n            </DropdownMenuPrimitive.ItemIndicator>\n          </span>\n          {children}\n        </motion.span>\n      </DropdownMenuPrimitive.RadioItem>\n    </MotionHighlightItem>\n  );\n});\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\ntype DropdownMenuLabelProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.Label\n> & {\n  inset?: boolean;\n};\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  DropdownMenuLabelProps\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      'px-2 py-1.5 text-sm font-semibold',\n      inset && 'pl-8',\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\ntype DropdownMenuSeparatorProps = React.ComponentPropsWithoutRef<\n  typeof DropdownMenuPrimitive.Separator\n>;\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  DropdownMenuSeparatorProps\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\ntype DropdownMenuShortcutProps = React.HTMLAttributes<HTMLSpanElement>;\nconst DropdownMenuShortcut = React.forwardRef<\n  HTMLSpanElement,\n  DropdownMenuShortcutProps\n>(({ className, ...props }, ref) => {\n  return (\n    <span\n      ref={ref}\n      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}\n      {...props}\n    />\n  );\n});\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut';\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n  type DropdownMenuProps,\n  type DropdownMenuTriggerProps,\n  type DropdownMenuContentProps,\n  type DropdownMenuItemProps,\n  type DropdownMenuCheckboxItemProps,\n  type DropdownMenuRadioItemProps,\n  type DropdownMenuLabelProps,\n  type DropdownMenuSeparatorProps,\n  type DropdownMenuShortcutProps,\n  type DropdownMenuGroupProps,\n  type DropdownMenuPortalProps,\n  type DropdownMenuSubProps,\n  type DropdownMenuSubContentProps,\n  type DropdownMenuSubTriggerProps,\n  type DropdownMenuRadioGroupProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/radix-dropdown-menu.tsx"
    }
  ]
}