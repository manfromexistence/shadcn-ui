{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "motion-highlight",
  "type": "registry:ui",
  "title": "Motion Highlight",
  "description": "Motion highlight component that displays the motion highlight effect.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/effects/motion-highlight/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, Transition, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype MotionHighlightMode = 'children' | 'parent';\ntype Bounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\ninterface MotionHighlightContextType {\n  mode: MotionHighlightMode;\n  activeValue: string | null;\n  setActiveValue: (value: string | null) => void;\n  setBounds: (bounds: DOMRect) => void;\n  clearBounds: () => void;\n  id: string;\n  hover: boolean;\n  className?: string;\n  activeClassName?: string;\n  setActiveClassName: (className: string) => void;\n  transition?: Transition;\n  disabled?: boolean;\n  exitDelay?: number;\n  forceUpdateBounds?: boolean;\n}\n\nconst MotionHighlightContext = React.createContext<\n  MotionHighlightContextType | undefined\n>(undefined);\n\nconst useMotionHighlight = (): MotionHighlightContextType => {\n  const context = React.useContext(MotionHighlightContext);\n  if (!context) {\n    throw new Error(\n      'useMotionHighlight must be used within a MotionHighlightProvider',\n    );\n  }\n  return context;\n};\n\ninterface BaseMotionHighlightProps {\n  mode?: MotionHighlightMode;\n  value?: string | null;\n  defaultValue?: string | null;\n  onValueChange?: (value: string | null) => void;\n  className?: string;\n  transition?: Transition;\n  hover?: boolean;\n  disabled?: boolean;\n  exitDelay?: number;\n}\n\ninterface ParentModeMotionHighlightProps {\n  boundsOffset?: Partial<Bounds>;\n  containerClassName?: string;\n  forceUpdateBounds?: boolean;\n}\n\ninterface ControlledParentModeMotionHighlightProps\n  extends BaseMotionHighlightProps,\n    ParentModeMotionHighlightProps {\n  mode: 'parent';\n  controlledItems: true;\n  children: React.ReactNode;\n}\n\ninterface ControlledChildrenModeMotionHighlightProps\n  extends BaseMotionHighlightProps {\n  mode?: 'children' | undefined;\n  controlledItems: true;\n  children: React.ReactNode;\n}\n\ninterface UncontrolledParentModeMotionHighlightProps\n  extends BaseMotionHighlightProps,\n    ParentModeMotionHighlightProps {\n  mode: 'parent';\n  controlledItems?: false;\n  itemsClassName?: string;\n  children: React.ReactElement | React.ReactElement[];\n}\n\ninterface UncontrolledChildrenModeMotionHighlightProps\n  extends BaseMotionHighlightProps {\n  mode?: 'children';\n  controlledItems?: false;\n  itemsClassName?: string;\n  children: React.ReactElement | React.ReactElement[];\n}\n\ntype MotionHighlightProps =\n  | ControlledParentModeMotionHighlightProps\n  | ControlledChildrenModeMotionHighlightProps\n  | UncontrolledParentModeMotionHighlightProps\n  | UncontrolledChildrenModeMotionHighlightProps;\n\nconst MotionHighlight = React.forwardRef<HTMLDivElement, MotionHighlightProps>(\n  (props, ref) => {\n    const {\n      children,\n      value,\n      defaultValue,\n      onValueChange,\n      className,\n      transition = { type: 'spring', stiffness: 200, damping: 25 },\n      hover = false,\n      controlledItems,\n      disabled = false,\n      exitDelay = 0.2,\n      mode = 'children',\n    } = props;\n\n    const localRef = React.useRef<HTMLDivElement>(null);\n    React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);\n\n    const [activeValue, setActiveValue] = React.useState<string | null>(\n      value ?? defaultValue ?? null,\n    );\n    const [boundsState, setBoundsState] = React.useState<Bounds | null>(null);\n    const [activeClassNameState, setActiveClassNameState] =\n      React.useState<string>('');\n\n    const isFirstBoundsRender = React.useRef(true);\n\n    React.useEffect(() => {\n      if (boundsState !== null) {\n        isFirstBoundsRender.current = false;\n        return;\n      }\n      isFirstBoundsRender.current = true;\n    }, [boundsState]);\n\n    const id = React.useId();\n\n    const handleSetActiveId = React.useCallback(\n      (id: string | null) => {\n        setActiveValue(id);\n        onValueChange?.(id);\n      },\n      [onValueChange],\n    );\n\n    const setBounds = React.useCallback(\n      (bounds: DOMRect) => {\n        if (!localRef.current) return;\n        const boundsOffset = (props as ParentModeMotionHighlightProps)\n          ?.boundsOffset ?? {\n          top: 0,\n          left: 0,\n          width: 0,\n          height: 0,\n        };\n        const containerRect = localRef.current.getBoundingClientRect();\n        setBoundsState({\n          top: bounds.top - containerRect.top + (boundsOffset.top ?? 0),\n          left: bounds.left - containerRect.left + (boundsOffset.left ?? 0),\n          width: bounds.width + (boundsOffset.width ?? 0),\n          height: bounds.height + (boundsOffset.height ?? 0),\n        });\n      },\n      [props],\n    );\n\n    const clearBounds = React.useCallback(() => setBoundsState(null), []);\n\n    React.useEffect(() => {\n      if (value !== undefined) setActiveValue(value);\n      else if (defaultValue !== undefined) setActiveValue(defaultValue);\n    }, [value, defaultValue]);\n\n    const render = React.useCallback(\n      (children: React.ReactNode) => {\n        if (mode === 'parent') {\n          return (\n            <div\n              ref={localRef}\n              className={cn(\n                'relative',\n                (props as ParentModeMotionHighlightProps)?.containerClassName,\n              )}\n            >\n              <AnimatePresence initial={false}>\n                {boundsState && (\n                  <motion.div\n                    animate={{\n                      top: boundsState.top,\n                      left: boundsState.left,\n                      width: boundsState.width,\n                      height: boundsState.height,\n                      opacity: 1,\n                    }}\n                    initial={\n                      isFirstBoundsRender.current\n                        ? {\n                            top: boundsState.top,\n                            left: boundsState.left,\n                            width: boundsState.width,\n                            height: boundsState.height,\n                            opacity: 0,\n                          }\n                        : { opacity: 0 }\n                    }\n                    exit={{\n                      opacity: 0,\n                      transition: {\n                        ...transition,\n                        delay: (transition?.delay ?? 0) + (exitDelay ?? 0),\n                      },\n                    }}\n                    transition={transition}\n                    className={cn(\n                      'absolute bg-muted z-0',\n                      className,\n                      activeClassNameState,\n                    )}\n                  />\n                )}\n              </AnimatePresence>\n              {children}\n            </div>\n          );\n        }\n\n        return children;\n      },\n      [\n        mode,\n        props,\n        boundsState,\n        transition,\n        exitDelay,\n        className,\n        activeClassNameState,\n      ],\n    );\n\n    return (\n      <MotionHighlightContext.Provider\n        value={{\n          mode,\n          activeValue,\n          setActiveValue: handleSetActiveId,\n          id,\n          hover,\n          className,\n          transition,\n          disabled,\n          exitDelay,\n          setBounds,\n          clearBounds,\n          activeClassName: activeClassNameState,\n          setActiveClassName: setActiveClassNameState,\n          forceUpdateBounds: (props as ParentModeMotionHighlightProps)\n            ?.forceUpdateBounds,\n        }}\n      >\n        {controlledItems\n          ? render(children)\n          : render(\n              React.Children.map(children, (child, index) => (\n                <MotionHighlightItem\n                  key={index}\n                  className={props?.itemsClassName}\n                >\n                  {child}\n                </MotionHighlightItem>\n              )),\n            )}\n      </MotionHighlightContext.Provider>\n    );\n  },\n);\n\nMotionHighlight.displayName = 'MotionHighlight';\n\ninterface ExtendedChildProps extends React.HTMLAttributes<HTMLElement> {\n  id?: string;\n  ref?: React.Ref<HTMLElement>;\n  'data-active'?: string;\n  'data-value'?: string;\n  'data-disabled'?: string;\n}\n\ninterface MotionHighlightItemProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactElement;\n  id?: string;\n  value?: string;\n  className?: string;\n  transition?: Transition;\n  activeClassName?: string;\n  disabled?: boolean;\n  exitDelay?: number;\n  withoutDataAttributes?: boolean;\n  asChild?: boolean;\n  forceUpdateBounds?: boolean;\n}\n\nconst MotionHighlightItem = React.forwardRef<\n  HTMLDivElement,\n  MotionHighlightItemProps\n>(\n  (\n    {\n      children,\n      id,\n      value,\n      className,\n      transition,\n      disabled = false,\n      activeClassName,\n      exitDelay,\n      withoutDataAttributes = false,\n      asChild = false,\n      forceUpdateBounds,\n      ...props\n    },\n    ref,\n  ) => {\n    const itemId = React.useId();\n    const {\n      activeValue,\n      setActiveValue,\n      mode,\n      setBounds,\n      clearBounds,\n      hover,\n      className: contextClassName,\n      transition: contextTransition,\n      id: contextId,\n      disabled: contextDisabled,\n      exitDelay: contextExitDelay,\n      forceUpdateBounds: contextForceUpdateBounds,\n      setActiveClassName,\n    } = useMotionHighlight();\n\n    const element = children as React.ReactElement<ExtendedChildProps>;\n    const childValue =\n      id ??\n      value ??\n      element.props?.['data-value'] ??\n      element.props?.id ??\n      itemId;\n    const isActive = activeValue === childValue;\n    const isDisabled = disabled === undefined ? contextDisabled : disabled;\n    const itemTransition = transition ?? contextTransition;\n\n    const localRef = React.useRef<HTMLDivElement>(null);\n    React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);\n\n    React.useEffect(() => {\n      if (mode !== 'parent') return;\n      let rafId: number;\n      let previousBounds: Bounds | null = null;\n      const shouldUpdateBounds =\n        forceUpdateBounds === true ||\n        (contextForceUpdateBounds && forceUpdateBounds !== false);\n\n      const updateBounds = () => {\n        if (!localRef.current) return;\n\n        const bounds = localRef.current.getBoundingClientRect();\n\n        if (shouldUpdateBounds) {\n          if (\n            previousBounds &&\n            previousBounds.top === bounds.top &&\n            previousBounds.left === bounds.left &&\n            previousBounds.width === bounds.width &&\n            previousBounds.height === bounds.height\n          )\n            return;\n          previousBounds = bounds;\n          rafId = requestAnimationFrame(updateBounds);\n        }\n\n        setBounds(bounds);\n      };\n\n      if (activeValue === childValue) {\n        updateBounds();\n        setActiveClassName(activeClassName ?? '');\n      }\n\n      if (!activeValue) clearBounds();\n\n      if (shouldUpdateBounds) return () => cancelAnimationFrame(rafId);\n    }, [\n      mode,\n      activeValue,\n      setBounds,\n      clearBounds,\n      childValue,\n      activeClassName,\n      setActiveClassName,\n      forceUpdateBounds,\n      contextForceUpdateBounds,\n    ]);\n\n    if (!React.isValidElement(children)) return children;\n\n    if (asChild) {\n      if (mode === 'children') {\n        return React.cloneElement(\n          element,\n          {\n            key: childValue,\n            ref: localRef,\n            className: cn('relative', element.props.className),\n            ...(!withoutDataAttributes && {\n              'data-active': isActive ? 'true' : 'false',\n              'aria-selected': isActive,\n              'data-disabled': isDisabled ? 'true' : 'false',\n              'data-value': childValue,\n            }),\n            ...(hover\n              ? {\n                  onMouseEnter: () => setActiveValue(childValue),\n                  onMouseLeave: () => setActiveValue(null),\n                }\n              : {\n                  onClick: () => setActiveValue(childValue),\n                }),\n            ...props,\n          },\n          <>\n            <AnimatePresence initial={false}>\n              {isActive && !isDisabled && (\n                <motion.div\n                  layoutId={`transition-background-${contextId}`}\n                  className={cn(\n                    'absolute inset-0 bg-muted z-0',\n                    contextClassName,\n                    activeClassName,\n                  )}\n                  transition={itemTransition}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{\n                    opacity: 0,\n                    transition: {\n                      ...itemTransition,\n                      delay:\n                        (itemTransition?.delay ?? 0) +\n                        (exitDelay ?? contextExitDelay ?? 0),\n                    },\n                  }}\n                  data-active={isActive ? 'true' : 'false'}\n                  aria-selected={isActive}\n                  data-disabled={isDisabled ? 'true' : 'false'}\n                  data-value={childValue}\n                />\n              )}\n            </AnimatePresence>\n\n            <div\n              className={cn('relative z-[1]', className)}\n              data-active={isActive ? 'true' : 'false'}\n              data-value={childValue}\n              aria-selected={isActive}\n              data-disabled={isDisabled ? 'true' : 'false'}\n            >\n              {children}\n            </div>\n          </>,\n        );\n      }\n\n      return React.cloneElement(element, {\n        ref: localRef,\n        ...(hover\n          ? {\n              onMouseEnter: (e) => {\n                setActiveValue(childValue);\n                element.props.onMouseEnter?.(e);\n              },\n              onMouseLeave: (e) => {\n                setActiveValue(null);\n                element.props.onMouseLeave?.(e);\n              },\n            }\n          : {\n              onClick: (e) => {\n                setActiveValue(childValue);\n                element.props.onClick?.(e);\n              },\n            }),\n        ...(!withoutDataAttributes && {\n          'data-active': isActive ? 'true' : 'false',\n          'aria-selected': isActive,\n          'data-disabled': isDisabled ? 'true' : 'false',\n          'data-value': childValue,\n        }),\n      });\n    }\n\n    return (\n      <div\n        key={childValue}\n        ref={localRef}\n        className={cn(mode === 'children' && 'relative', className)}\n        data-active={isActive ? 'true' : 'false'}\n        data-value={childValue}\n        aria-selected={isActive}\n        data-disabled={isDisabled ? 'true' : 'false'}\n        {...props}\n        {...(hover\n          ? {\n              onMouseEnter: (e) => {\n                setActiveValue(childValue);\n                element.props.onMouseEnter?.(e);\n              },\n              onMouseLeave: (e) => {\n                setActiveValue(null);\n                element.props.onMouseLeave?.(e);\n              },\n            }\n          : {\n              onClick: (e) => {\n                setActiveValue(childValue);\n                element.props.onClick?.(e);\n              },\n            })}\n      >\n        {mode === 'children' && (\n          <AnimatePresence initial={false}>\n            {isActive && !isDisabled && (\n              <motion.div\n                layoutId={`transition-background-${contextId}`}\n                className={cn(\n                  'absolute inset-0 bg-muted z-0',\n                  contextClassName,\n                  activeClassName,\n                )}\n                transition={itemTransition}\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{\n                  opacity: 0,\n                  transition: {\n                    ...itemTransition,\n                    delay:\n                      (itemTransition?.delay ?? 0) +\n                      (exitDelay ?? contextExitDelay ?? 0),\n                  },\n                }}\n                data-active={isActive ? 'true' : 'false'}\n                aria-selected={isActive}\n                data-disabled={isDisabled ? 'true' : 'false'}\n                data-value={childValue}\n              />\n            )}\n          </AnimatePresence>\n        )}\n\n        {React.cloneElement(element, {\n          className: cn('relative z-[1]', element.props.className),\n          ...(!withoutDataAttributes && {\n            'data-active': isActive ? 'true' : 'false',\n            'aria-selected': isActive,\n            'data-disabled': isDisabled ? 'true' : 'false',\n            'data-value': childValue,\n          }),\n        })}\n      </div>\n    );\n  },\n);\nMotionHighlightItem.displayName = 'MotionHighlightItem';\n\nexport {\n  MotionHighlight,\n  MotionHighlightItem,\n  useMotionHighlight,\n  type MotionHighlightProps,\n  type MotionHighlightItemProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/motion-highlight.tsx"
    }
  ]
}