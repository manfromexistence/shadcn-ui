{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "headless-dialog",
  "type": "registry:ui",
  "title": "Headless Dialog",
  "description": "Headless UI dialog component",
  "dependencies": [
    "@headlessui/react",
    "motion"
  ],
  "files": [
    {
      "path": "registry/headless/headless-dialog/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  Dialog as DialogPrimitive,\n  DialogBackdrop as DialogBackdropPrimitive,\n  DialogPanel as DialogPanelPrimitive,\n  DialogTitle as DialogTitlePrimitive,\n  Description as DialogDescriptionPrimitive,\n  CloseButton,\n} from '@headlessui/react';\nimport {\n  motion,\n  AnimatePresence,\n  type Transition,\n  type HTMLMotionProps,\n} from 'motion/react';\n\nimport { cn } from '@/lib/utils';\nimport { X } from 'lucide-react';\n\ntype DialogProps = React.ComponentPropsWithoutRef<\n  typeof DialogPrimitive<typeof motion.div>\n>;\nconst Dialog = React.forwardRef<HTMLDivElement, DialogProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <AnimatePresence>\n        {props?.open && (\n          <DialogPrimitive\n            className={cn('relative z-50', className)}\n            {...props}\n            ref={ref}\n            static\n          />\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nDialog.displayName = DialogPrimitive.displayName;\n\ntype DialogBackdropProps = React.ComponentPropsWithoutRef<\n  typeof DialogBackdropPrimitive<typeof motion.div>\n>;\nconst DialogBackdrop = React.forwardRef<\n  React.ElementRef<typeof DialogBackdropPrimitive>,\n  DialogBackdropProps\n>(({ className, as = motion.div, ...props }, ref) => (\n  <DialogBackdropPrimitive\n    key=\"dialog-backdrop\"\n    ref={ref}\n    className={cn('fixed inset-0 z-50 bg-black/80', className)}\n    as={as}\n    initial={{ opacity: 0 }}\n    animate={{ opacity: 1 }}\n    exit={{ opacity: 0 }}\n    {...props}\n  />\n));\nDialogBackdrop.displayName = DialogBackdropPrimitive.displayName;\n\ntype FlipDirection = 'top' | 'bottom' | 'left' | 'right';\n\ntype DialogPanelProps = React.ComponentPropsWithoutRef<\n  typeof DialogPanelPrimitive<typeof motion.div>\n> &\n  Omit<HTMLMotionProps<'div'>, 'children'> & {\n    from?: FlipDirection;\n    transition?: Transition;\n  };\nconst DialogPanel = React.forwardRef<\n  React.ElementRef<typeof DialogPanelPrimitive>,\n  DialogPanelProps\n>(\n  (\n    {\n      children,\n      className,\n      as = motion.div,\n      from = 'top',\n      transition = { type: 'spring', stiffness: 150, damping: 25 },\n      ...props\n    },\n    ref,\n  ) => {\n    const initialRotation =\n      from === 'top' || from === 'left' ? '20deg' : '-20deg';\n    const isVertical = from === 'top' || from === 'bottom';\n    const rotateAxis = isVertical ? 'rotateX' : 'rotateY';\n\n    return (\n      <DialogPanelPrimitive\n        key=\"dialog-panel\"\n        ref={ref}\n        className={cn(\n          'fixed left-[50%] top-[50%] z-50 grid w-[calc(100%-2rem)] max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg rounded-xl',\n          className,\n        )}\n        as={as}\n        initial={{\n          opacity: 0,\n          filter: 'blur(4px)',\n          transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,\n          transition,\n        }}\n        animate={{\n          opacity: 1,\n          filter: 'blur(0px)',\n          transform: `perspective(500px) ${rotateAxis}(0deg) scale(1)`,\n          transition,\n        }}\n        exit={{\n          opacity: 0,\n          filter: 'blur(4px)',\n          transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,\n          transition,\n        }}\n        {...props}\n      >\n        {(bag) => (\n          <>\n            {typeof children === 'function' ? children(bag) : children}\n\n            <CloseButton className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n              <X className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Close</span>\n            </CloseButton>\n          </>\n        )}\n      </DialogPanelPrimitive>\n    );\n  },\n);\nDialogPanel.displayName = DialogPanelPrimitive.displayName;\n\ntype DialogHeaderProps = React.HTMLAttributes<HTMLDivElement>;\nconst DialogHeader = React.forwardRef<HTMLDivElement, DialogHeaderProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'flex flex-col space-y-1.5 text-center sm:text-left',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nDialogHeader.displayName = 'DialogHeader';\n\ntype DialogFooterProps = React.HTMLAttributes<HTMLDivElement>;\nconst DialogFooter = React.forwardRef<HTMLDivElement, DialogFooterProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'flex flex-col-reverse sm:flex-row sm:justify-end gap-2',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nDialogFooter.displayName = 'DialogFooter';\n\ntype DialogTitleProps = React.ComponentPropsWithoutRef<\n  typeof DialogTitlePrimitive\n>;\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogTitlePrimitive>,\n  DialogTitleProps\n>(({ className, ...props }, ref) => (\n  <DialogTitlePrimitive\n    ref={ref}\n    className={cn(\n      'text-lg font-semibold leading-none tracking-tight',\n      className,\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogTitlePrimitive.displayName;\n\ntype DialogDescriptionProps = React.ComponentPropsWithoutRef<\n  typeof DialogDescriptionPrimitive\n>;\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogDescriptionPrimitive>,\n  DialogDescriptionProps\n>(({ className, ...props }, ref) => (\n  <DialogDescriptionPrimitive\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogDescriptionPrimitive.displayName;\n\nexport {\n  Dialog,\n  DialogBackdrop,\n  DialogPanel,\n  DialogTitle,\n  DialogDescription,\n  DialogHeader,\n  DialogFooter,\n  type DialogProps,\n  type DialogBackdropProps,\n  type DialogPanelProps,\n  type DialogTitleProps,\n  type DialogDescriptionProps,\n  type DialogHeaderProps,\n  type DialogFooterProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/headless-dialog.tsx"
    }
  ]
}