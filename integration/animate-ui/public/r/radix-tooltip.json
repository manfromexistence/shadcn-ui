{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radix-tooltip",
  "type": "registry:ui",
  "title": "Radix Tooltip",
  "description": "Radix UI tooltip component",
  "dependencies": [
    "motion",
    "@radix-ui/react-tooltip"
  ],
  "files": [
    {
      "path": "registry/radix/radix-tooltip/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { AnimatePresence, motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype TooltipProviderProps = React.ComponentPropsWithoutRef<\n  typeof TooltipPrimitive.Provider\n>;\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\ninterface TooltipContextType {\n  isOpen: boolean;\n}\nconst TooltipContext = React.createContext<TooltipContextType>({\n  isOpen: false,\n});\n\nconst useTooltip = (): TooltipContextType => {\n  const context = React.useContext(TooltipContext);\n  if (!context) {\n    throw new Error('useTooltip must be used within a Tooltip');\n  }\n  return context;\n};\n\ntype TooltipProps = React.ComponentPropsWithoutRef<\n  typeof TooltipPrimitive.Root\n>;\n\nconst Tooltip: React.FC<TooltipProps> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  React.useEffect(() => {\n    if (props?.open !== undefined) setIsOpen(props.open);\n  }, [props?.open]);\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <TooltipContext.Provider value={{ isOpen }}>\n      <TooltipPrimitive.Root {...props} onOpenChange={handleOpenChange}>\n        {children}\n      </TooltipPrimitive.Root>\n    </TooltipContext.Provider>\n  );\n};\n\ntype TooltipTriggerProps = React.ComponentPropsWithoutRef<\n  typeof TooltipPrimitive.Trigger\n>;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst getInitialPosition = (side: 'top' | 'bottom' | 'left' | 'right') => {\n  switch (side) {\n    case 'top':\n      return { y: 15 };\n    case 'bottom':\n      return { y: -15 };\n    case 'left':\n      return { x: 15 };\n    case 'right':\n      return { x: -15 };\n  }\n};\n\ntype TooltipContentProps = React.ComponentPropsWithoutRef<\n  typeof TooltipPrimitive.Content\n> & {\n  transition?: Transition;\n};\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  TooltipContentProps\n>(\n  (\n    {\n      className,\n      side = 'top',\n      sideOffset = 4,\n      transition = { type: 'spring', stiffness: 300, damping: 25 },\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = useTooltip();\n    const initialPosition = getInitialPosition(side);\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <TooltipPrimitive.Portal forceMount>\n            <TooltipPrimitive.Content\n              forceMount\n              sideOffset={sideOffset}\n              className=\"z-50\"\n              {...props}\n              ref={ref}\n            >\n              <motion.div\n                key=\"tooltip\"\n                initial={{ opacity: 0, scale: 0, ...initialPosition }}\n                animate={{ opacity: 1, scale: 1, x: 0, y: 0 }}\n                exit={{ opacity: 0, scale: 0, ...initialPosition }}\n                transition={transition}\n                className={cn(\n                  'relative overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md',\n                  className,\n                )}\n              >\n                {children}\n              </motion.div>\n            </TooltipPrimitive.Content>\n          </TooltipPrimitive.Portal>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipProvider,\n  useTooltip,\n  type TooltipContextType,\n  type TooltipProps,\n  type TooltipTriggerProps,\n  type TooltipContentProps,\n  type TooltipProviderProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/radix-tooltip.tsx"
    }
  ]
}