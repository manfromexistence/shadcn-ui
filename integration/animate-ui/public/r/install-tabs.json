{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "install-tabs",
  "type": "registry:ui",
  "title": "Install Tabs",
  "description": "Install tabs component",
  "dependencies": [
    "shiki"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/tabs",
    "https://animate-ui.com/r/copy-button"
  ],
  "files": [
    {
      "path": "registry/components/install-tabs/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { useTheme } from 'next-themes';\n\nimport { cn } from '@/lib/utils';\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  TabsContents,\n  type TabsProps,\n} from '@/components/animate-ui/tabs';\nimport { CopyButton } from '@/components/animate-ui/copy-button';\n\ntype InstallTabsProps = {\n  commands: Record<string, string>;\n  lang?: string;\n  themes?: {\n    light: string;\n    dark: string;\n  };\n  copyButton?: boolean;\n  onCopy?: (content: string) => void;\n} & Omit<TabsProps, 'children'>;\n\nconst InstallTabs = React.forwardRef<HTMLDivElement, InstallTabsProps>(\n  (\n    {\n      commands,\n      lang = 'bash',\n      themes = {\n        light: 'github-light',\n        dark: 'github-dark',\n      },\n      className,\n      defaultValue,\n      value,\n      onValueChange,\n      copyButton = true,\n      onCopy,\n      ...props\n    },\n    ref,\n  ) => {\n    const { resolvedTheme } = useTheme();\n\n    const [highlightedCommands, setHighlightedCommands] = React.useState<Record<\n      string,\n      string\n    > | null>(null);\n    const [selectedCommand, setSelectedCommand] = React.useState<string>(\n      value ?? defaultValue ?? Object.keys(commands)[0],\n    );\n\n    React.useEffect(() => {\n      async function loadHighlightedCode() {\n        try {\n          const { codeToHtml } = await import('shiki');\n          const newHighlightedCommands: Record<string, string> = {};\n\n          for (const [command, val] of Object.entries(commands)) {\n            const highlighted = await codeToHtml(val, {\n              lang,\n              themes: {\n                light: themes.light,\n                dark: themes.dark,\n              },\n              defaultColor: resolvedTheme === 'dark' ? 'dark' : 'light',\n            });\n\n            newHighlightedCommands[command] = highlighted;\n          }\n\n          setHighlightedCommands(newHighlightedCommands);\n        } catch (error) {\n          console.error('Error highlighting commands', error);\n          setHighlightedCommands(commands);\n        }\n      }\n      loadHighlightedCode();\n    }, [commands, resolvedTheme, lang, themes.light, themes.dark]);\n\n    return (\n      <Tabs\n        ref={ref}\n        className={cn(\n          'w-full gap-0 bg-muted/50 rounded-xl border overflow-hidden',\n          className,\n        )}\n        {...(props as Omit<\n          TabsProps,\n          'value' | 'defaultValue' | 'onValueChange'\n        >)}\n        value={selectedCommand}\n        onValueChange={(val) => {\n          setSelectedCommand(val);\n          onValueChange?.(val);\n        }}\n      >\n        <TabsList\n          className=\"w-full relative justify-between rounded-none h-10 bg-muted border-b border-border/75 dark:border-border/50 text-current py-0 px-4\"\n          activeClassName=\"rounded-none shadow-none bg-transparent after:content-[''] after:absolute after:inset-x-0 after:h-0.5 after:bottom-0 dark:after:bg-white after:bg-black after:rounded-t-full\"\n        >\n          <div className=\"flex gap-x-3 h-full\">\n            {highlightedCommands &&\n              Object.keys(highlightedCommands).map((command) => (\n                <TabsTrigger\n                  key={command}\n                  value={command}\n                  className=\"text-muted-foreground data-[state=active]:text-current px-0\"\n                >\n                  {command}\n                </TabsTrigger>\n              ))}\n          </div>\n\n          {copyButton && highlightedCommands && (\n            <CopyButton\n              content={commands[selectedCommand]}\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"-me-2 bg-transparent hover:bg-black/5 dark:hover:bg-white/10\"\n              onCopy={onCopy}\n            />\n          )}\n        </TabsList>\n        <TabsContents className=\"h-12\">\n          {highlightedCommands &&\n            Object.entries(highlightedCommands).map(([command, val]) => (\n              <TabsContent\n                key={command}\n                className=\"h-12 w-full text-sm flex items-center px-4 overflow-auto\"\n                value={command}\n              >\n                <div\n                  className=\"[&>pre,_&_code]:!bg-transparent [&>pre,_&_code]:[background:transparent_!important] [&>pre,_&_code]:border-none [&_code]:!text-[13px]\"\n                  dangerouslySetInnerHTML={{ __html: val }}\n                />\n              </TabsContent>\n            ))}\n        </TabsContents>\n      </Tabs>\n    );\n  },\n);\n\nInstallTabs.displayName = 'InstallTabs';\n\nexport { InstallTabs, type InstallTabsProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/install-tabs.tsx"
    }
  ]
}