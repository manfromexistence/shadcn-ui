{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "headless-disclosure",
  "type": "registry:ui",
  "title": "Headless Disclosure",
  "description": "Headless UI disclosure component",
  "dependencies": [
    "@headlessui/react",
    "motion"
  ],
  "files": [
    {
      "path": "registry/headless/headless-disclosure/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  Disclosure as DisclosurePrimitive,\n  DisclosureButton as DisclosureButtonPrimitive,\n  DisclosurePanel as DisclosurePanelPrimitive,\n} from '@headlessui/react';\nimport {\n  AnimatePresence,\n  motion,\n  type HTMLMotionProps,\n  type Transition,\n} from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface DisclosureContextType {\n  isOpen: boolean;\n}\nconst DisclosureContext = React.createContext<DisclosureContextType>({\n  isOpen: false,\n});\n\nconst useDisclosure = (): DisclosureContextType => {\n  const context = React.useContext(DisclosureContext);\n  if (!context) {\n    throw new Error('useDisclosure must be used within a Disclosure');\n  }\n  return context;\n};\n\ntype DisclosureProps = React.ComponentPropsWithoutRef<\n  typeof DisclosurePrimitive\n>;\nconst Disclosure = React.forwardRef<\n  React.ElementRef<typeof DisclosurePrimitive>,\n  DisclosureProps\n>(({ children, ...props }, ref) => {\n  return (\n    <DisclosurePrimitive {...props} ref={ref}>\n      {(bag) => (\n        <DisclosureContext.Provider value={{ isOpen: bag.open }}>\n          {typeof children === 'function' ? children(bag) : children}\n        </DisclosureContext.Provider>\n      )}\n    </DisclosurePrimitive>\n  );\n});\nDisclosure.displayName = DisclosurePrimitive.displayName;\n\ntype DisclosureButtonProps = React.ComponentPropsWithoutRef<\n  typeof DisclosureButtonPrimitive\n>;\nconst DisclosureButton = DisclosureButtonPrimitive;\n\ntype DisclosurePanelProps = React.ComponentPropsWithoutRef<\n  typeof DisclosurePanelPrimitive\n> &\n  Omit<HTMLMotionProps<'div'>, 'children'> & {\n    transition?: Transition;\n  };\nconst DisclosurePanel = React.forwardRef<HTMLDivElement, DisclosurePanelProps>(\n  (\n    {\n      className,\n      children,\n      transition = { type: 'spring', stiffness: 150, damping: 22 },\n      as = motion.div,\n      unmount,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = useDisclosure();\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <DisclosurePanelPrimitive static as={as} unmount={unmount}>\n            {(bag) => (\n              <motion.div\n                key=\"disclosure-panel\"\n                initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n                animate={{ height: 'auto', opacity: 1, '--mask-stop': '100%' }}\n                exit={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n                transition={transition}\n                style={{\n                  maskImage:\n                    'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                  WebkitMaskImage:\n                    'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                }}\n                className={cn('overflow-hidden', className)}\n                ref={ref}\n                {...props}\n              >\n                {typeof children === 'function' ? children(bag) : children}\n              </motion.div>\n            )}\n          </DisclosurePanelPrimitive>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nDisclosurePanel.displayName = DisclosurePanelPrimitive.displayName;\n\nexport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel,\n  useDisclosure,\n  type DisclosureProps,\n  type DisclosureButtonProps,\n  type DisclosurePanelProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/headless-disclosure.tsx"
    }
  ]
}