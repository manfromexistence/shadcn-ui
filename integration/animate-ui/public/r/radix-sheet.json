{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radix-sheet",
  "type": "registry:ui",
  "title": "Radix Sheet",
  "description": "Radix Sheet component",
  "dependencies": [
    "motion",
    "class-variance-authority",
    "lucide-react",
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "path": "registry/radix/radix-sheet/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as SheetPrimitive from '@radix-ui/react-dialog';\nimport {\n  AnimatePresence,\n  motion,\n  type HTMLMotionProps,\n  type Transition,\n} from 'motion/react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\n\ninterface SheetContextType {\n  isOpen: boolean;\n}\nconst SheetContext = React.createContext<SheetContextType>({ isOpen: false });\n\nconst useSheet = (): SheetContextType => {\n  const context = React.useContext(SheetContext);\n  if (!context) {\n    throw new Error('useSheet must be used within a Sheet');\n  }\n  return context;\n};\n\ntype SheetProps = React.ComponentPropsWithoutRef<typeof SheetPrimitive.Root>;\nconst Sheet: React.FC<SheetProps> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  React.useEffect(() => {\n    if (props?.open !== undefined) setIsOpen(props.open);\n  }, [props?.open]);\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <SheetContext.Provider value={{ isOpen }}>\n      <SheetPrimitive.Root {...props} onOpenChange={handleOpenChange}>\n        {children}\n      </SheetPrimitive.Root>\n    </SheetContext.Provider>\n  );\n};\n\ntype SheetTriggerProps = React.ComponentPropsWithoutRef<\n  typeof SheetPrimitive.Trigger\n>;\nconst SheetTrigger = SheetPrimitive.Trigger;\n\ntype SheetCloseProps = React.ComponentPropsWithoutRef<\n  typeof SheetPrimitive.Close\n>;\nconst SheetClose = SheetPrimitive.Close;\n\ntype SheetPortalProps = React.ComponentPropsWithoutRef<\n  typeof SheetPrimitive.Portal\n>;\nconst SheetPortal = SheetPrimitive.Portal;\n\ntype SheetOverlayProps = React.ComponentPropsWithoutRef<\n  typeof SheetPrimitive.Overlay\n>;\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  SheetOverlayProps\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn('fixed inset-0 z-50 bg-black/80', className)}\n    {...props}\n    ref={ref}\n  />\n));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\n\nconst sheetVariants = cva('fixed z-50 gap-4 bg-background p-6 shadow-lg', {\n  variants: {\n    side: {\n      top: 'inset-x-0 top-0 border-b',\n      bottom: 'inset-x-0 bottom-0 border-t',\n      left: 'inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',\n      right: 'inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',\n    },\n  },\n  defaultVariants: {\n    side: 'right',\n  },\n});\n\ntype SheetContentProps = React.ComponentPropsWithoutRef<\n  typeof SheetPrimitive.Content\n> &\n  VariantProps<typeof sheetVariants> &\n  HTMLMotionProps<'div'> & {\n    transition?: Transition;\n  };\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(\n  (\n    {\n      side = 'right',\n      className,\n      transition = { type: 'spring', stiffness: 150, damping: 25 },\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = useSheet();\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <SheetPortal forceMount>\n            <SheetOverlay asChild forceMount>\n              <motion.div\n                key=\"sheet-overlay\"\n                initial={{ opacity: 0, filter: 'blur(4px)' }}\n                animate={{ opacity: 1, filter: 'blur(0px)' }}\n                exit={{ opacity: 0, filter: 'blur(4px)' }}\n                transition={{ duration: 0.2, ease: 'easeInOut' }}\n              />\n            </SheetOverlay>\n            <SheetPrimitive.Content asChild forceMount ref={ref} {...props}>\n              <motion.div\n                key=\"sheet-content\"\n                initial={\n                  side === 'right'\n                    ? { x: '100%', opacity: 0 }\n                    : side === 'left'\n                      ? { x: '-100%', opacity: 0 }\n                      : side === 'top'\n                        ? { y: '-100%', opacity: 0 }\n                        : { y: '100%', opacity: 0 }\n                }\n                animate={{ x: 0, y: 0, opacity: 1 }}\n                exit={\n                  side === 'right'\n                    ? { x: '100%', opacity: 0 }\n                    : side === 'left'\n                      ? { x: '-100%', opacity: 0 }\n                      : side === 'top'\n                        ? { y: '-100%', opacity: 0 }\n                        : { y: '100%', opacity: 0 }\n                }\n                transition={transition}\n                className={cn(sheetVariants({ side }), className)}\n                {...props}\n              >\n                {children}\n                <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n                  <X className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">Close</span>\n                </SheetPrimitive.Close>\n              </motion.div>\n            </SheetPrimitive.Content>\n          </SheetPortal>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nSheetContent.displayName = SheetPrimitive.Content.displayName;\n\ntype SheetHeaderProps = React.HTMLAttributes<HTMLDivElement>;\nconst SheetHeader = React.forwardRef<HTMLDivElement, SheetHeaderProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'flex flex-col space-y-2 text-center sm:text-left',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSheetHeader.displayName = 'SheetHeader';\n\ntype SheetFooterProps = React.HTMLAttributes<HTMLDivElement>;\nconst SheetFooter = React.forwardRef<HTMLDivElement, SheetFooterProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSheetFooter.displayName = 'SheetFooter';\n\ntype SheetTitleProps = React.ComponentPropsWithoutRef<\n  typeof SheetPrimitive.Title\n>;\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  SheetTitleProps\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold text-foreground', className)}\n    {...props}\n  />\n));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\n\ntype SheetDescriptionProps = React.ComponentPropsWithoutRef<\n  typeof SheetPrimitive.Description\n>;\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  SheetDescriptionProps\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\n\nexport {\n  useSheet,\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n  type SheetProps,\n  type SheetPortalProps,\n  type SheetOverlayProps,\n  type SheetTriggerProps,\n  type SheetCloseProps,\n  type SheetContentProps,\n  type SheetHeaderProps,\n  type SheetFooterProps,\n  type SheetTitleProps,\n  type SheetDescriptionProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/radix-sheet.tsx"
    }
  ]
}