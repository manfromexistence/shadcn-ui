{
  "name": "intro-disclosure",
  "dependencies": [
    "framer-motion",
    "react-use-measure",
    "button",
    "aspect-ratio"
  ],
  "files": [
    {
      "name": "intro-disclosure.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport Image from \"next/image\"\nimport {\n  AnimatePresence,\n  motion,\n  useAnimation,\n  type PanInfo,\n} from \"framer-motion\"\nimport { CheckIcon, ExternalLinkIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\"\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n} from \"@/components/ui/drawer\"\nimport { Progress } from \"@/components/ui/progress\"\n\nfunction useMediaQuery(query: string) {\n  const [matches, setMatches] = React.useState<boolean | null>(null)\n\n  React.useEffect(() => {\n    const media = window.matchMedia(query)\n    setMatches(media.matches)\n\n    const listener = (e: MediaQueryListEvent) => setMatches(e.matches)\n    media.addEventListener(\"change\", listener)\n    return () => media.removeEventListener(\"change\", listener)\n  }, [query])\n\n  return matches ?? false\n}\n\nfunction useFeatureVisibility(featureId: string) {\n  const [isVisible, setIsVisible] = React.useState<boolean | null>(null)\n\n  React.useEffect(() => {\n    const storedValue = localStorage.getItem(`feature_${featureId}`)\n    setIsVisible(storedValue ? JSON.parse(storedValue) : true)\n  }, [featureId])\n\n  const hideFeature = () => {\n    localStorage.setItem(`feature_${featureId}`, JSON.stringify(false))\n    setIsVisible(false)\n  }\n\n  return { isVisible: isVisible === null ? false : isVisible, hideFeature }\n}\n\nfunction useSwipe(onSwipe: (direction: \"left\" | \"right\") => void) {\n  const handleDragEnd = (\n    event: MouseEvent | TouchEvent | PointerEvent,\n    info: PanInfo\n  ) => {\n    if (info.offset.x > 100) {\n      onSwipe(\"right\")\n    } else if (info.offset.x < -100) {\n      onSwipe(\"left\")\n    }\n  }\n\n  return { handleDragEnd }\n}\n\nconst fadeInScale = {\n  initial: { opacity: 0, scale: 0.95 },\n  animate: { opacity: 1, scale: 1 },\n  exit: { opacity: 0, scale: 0.95 },\n  transition: { duration: 0.2, ease: [0.23, 1, 0.32, 1] },\n}\n\nconst slideInOut = (direction: 1 | -1) => ({\n  initial: { opacity: 0, x: 20 * direction },\n  animate: { opacity: 1, x: 0 },\n  exit: { opacity: 0, x: -20 * direction },\n  transition: { duration: 0.3, ease: [0.25, 0.1, 0.25, 1] },\n})\n\nconst hoverScale = {\n  whileHover: { scale: 1.01 },\n  whileTap: { scale: 0.95 },\n  transition: { duration: 0.2 },\n}\n\nfunction StepPreview({ step, direction }: { step: Step; direction: 1 | -1 }) {\n  const controls = useAnimation()\n\n  React.useEffect(() => {\n    controls.start({\n      opacity: 1,\n      y: 0,\n      transition: { delay: 0.2, duration: 0.3 },\n    })\n  }, [controls, step])\n\n  return (\n    <motion.div\n      {...slideInOut(direction)}\n      className=\"relative h-full w-full   overflow-hidden rounded-sm rounded-rb-lg rounded-tl-xl ring-2 ring-black/10 dark:ring-black/10 dark:ring-offset-black ring-offset-8\"\n    >\n      {step.media ? (\n        <div className=\"relative bg-black h-full w-full\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={controls}\n            className=\"h-full w-full max-h-[700px]\"\n          >\n            {step.media.type === \"image\" ? (\n              <Image\n                src={step.media.src || \"/placeholder.svg\"}\n                alt={step.media.alt || \"\"}\n                fill\n                className=\"object-cover\"\n              />\n            ) : (\n              <video\n                src={step.media.src}\n                controls\n                className=\"h-full w-full object-cover\"\n              />\n            )}\n          </motion.div>\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 to-transparent\" />\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={controls}\n            className=\"absolute bottom-0 left-0 right-0 p-6\"\n          >\n            <h3 className=\"mb-2 text-2xl font-semibold text-white\">\n              {step.title}\n            </h3>\n            <p className=\"text-white hidden md:block\">\n              {step.full_description}\n            </p>\n          </motion.div>\n        </div>\n      ) : (\n        <div className=\"flex h-full items-center justify-center p-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={controls}\n            className=\"text-center\"\n          >\n            <h3 className=\"mb-2 text-2xl font-semibold text-primary\">\n              {step.title}\n            </h3>\n            <p className=\"text-muted-foreground\">{step.full_description}</p>\n          </motion.div>\n        </div>\n      )}\n    </motion.div>\n  )\n}\n\ninterface StepTabProps {\n  step: Step\n  isActive: boolean\n  onClick: () => void\n  isCompleted: boolean\n}\n\nfunction StepTab({ step, isActive, onClick, isCompleted }: StepTabProps) {\n  return (\n    <motion.button\n      {...hoverScale}\n      onClick={onClick}\n      className={cn(\n        \"flex flex-col items-start rounded-lg px-4 py-2 text-left transition-colors w-full\",\n        isActive ? \"bg-muted border border-border\" : \"hover:bg-muted/70\",\n        \"relative\"\n      )}\n      aria-current={isActive ? \"step\" : undefined}\n      aria-label={`${step.title}${isCompleted ? \" (completed)\" : \"\"}`}\n    >\n      <div className=\"mb-1 text-sm font-medium\">{step.title}</div>\n      <div className=\"text-xs hidden md:block text-muted-foreground line-clamp-2\">\n        {step.short_description}\n      </div>\n      {isCompleted && (\n        <motion.div {...fadeInScale} className=\"absolute right-2 top-2\">\n          <div className=\"rounded-full bg-primary p-1\">\n            <CheckIcon className=\"w-2 h-2 text-primary-foreground\" />\n          </div>\n        </motion.div>\n      )}\n    </motion.button>\n  )\n}\n\ninterface Step {\n  title: string\n  short_description: string\n  full_description: string\n  action?: {\n    label: string\n    onClick?: () => void\n    href?: string\n  }\n  media?: {\n    type: \"image\" | \"video\"\n    src: string\n    alt?: string\n  }\n}\n\ninterface FeatureDisclosureProps {\n  steps: Step[]\n  featureId: string\n  onComplete?: () => void\n  onSkip?: () => void\n  showProgressBar?: boolean\n  open: boolean\n  setOpen: (open: boolean) => void\n  forceVariant?: \"mobile\" | \"desktop\"\n}\n\ninterface StepContentProps {\n  steps: Step[]\n  currentStep: number\n  onSkip: () => void\n  onNext: () => void\n  onPrevious: () => void\n  hideFeature: () => void\n  completedSteps: number[]\n  onStepSelect: (index: number) => void\n  direction: 1 | -1\n  isDesktop: boolean\n}\n\nfunction StepContent({\n  steps,\n  currentStep,\n  onSkip,\n  onNext,\n  onPrevious,\n  hideFeature,\n  completedSteps,\n  onStepSelect,\n  direction,\n  isDesktop,\n  stepRef,\n}: StepContentProps & { stepRef: React.RefObject<HTMLButtonElement> }) {\n  const [skipNextTime, setSkipNextTime] = React.useState(false)\n\n  const renderActionButton = (action: Step[\"action\"]) => {\n    if (!action) return null\n\n    if (action.href) {\n      return (\n        <Button asChild className=\"w-full \" size=\"sm\" variant=\"link\">\n          <a href={action.href} target=\"_blank\" rel=\"noopener noreferrer\">\n            <span className=\"flex items-center gap-2\">\n              {action.label}\n              <ExternalLinkIcon className=\"w-4 h-4\" />\n            </span>\n          </a>\n        </Button>\n      )\n    }\n\n    return (\n      <Button\n        className=\"w-full rounded-full\"\n        size=\"sm\"\n        variant=\"secondary\"\n        onClick={action.onClick}\n      >\n        {action.label}\n      </Button>\n    )\n  }\n\n  return (\n    <div className=\"flex h-full flex-col max-w-3xl mx-auto\">\n      {isDesktop && (\n        <div className=\"flex-1  px-2 py-3\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, ease: [0.25, 0.1, 0.25, 1] }}\n            className=\"space-y-2 flex flex-col justify-center items-center px-1\"\n          >\n            {steps.map((step, index) => (\n              <StepTab\n                key={index}\n                step={step}\n                isActive={currentStep === index}\n                onClick={() => onStepSelect(index)}\n                isCompleted={completedSteps.includes(index)}\n              />\n            ))}\n          </motion.div>\n        </div>\n      )}\n      <AnimatePresence mode=\"wait\" initial={false}>\n        <motion.div\n          key={currentStep}\n          {...slideInOut(direction)}\n          className=\"mt-6 space-y-4 \"\n        >\n          {!isDesktop && steps[currentStep]?.media && (\n            <AspectRatio\n              ratio={16 / 9}\n              className=\"lg:overflow-hidden rounded-lg bg-muted \"\n            >\n              {steps[currentStep]?.media?.type === \"image\" ? (\n                <Image\n                  src={steps[currentStep]?.media?.src || \"/placeholder.svg\"}\n                  alt={steps[currentStep]?.media?.alt || \"\"}\n                  fill\n                  className=\"object-cover \"\n                />\n              ) : (\n                <video\n                  src={steps[currentStep]?.media?.src}\n                  controls\n                  className=\"h-full w-full object-cover\"\n                />\n              )}\n            </AspectRatio>\n          )}\n\n          {steps[currentStep]?.action ? (\n            <div className=\" px-2\">\n              {renderActionButton(steps[currentStep]?.action)}\n            </div>\n          ) : (\n            <div className=\"h-10\" />\n          )}\n\n          {/* Navigation buttons */}\n          <div className=\"flex items-center justify-between pr-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={onSkip}\n              className=\"text-muted-foreground hover:bg-card rounded-full\"\n            >\n              Skip all\n            </Button>\n            <div className=\"space-x-2\">\n              {currentStep > 0 && (\n                <Button\n                  onClick={onPrevious}\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"rounded-full hover:bg-transparent\"\n                >\n                  Previous\n                </Button>\n              )}\n              <Button\n                onClick={() => {\n                  if (skipNextTime) {\n                    hideFeature()\n                  }\n                  onNext()\n                }}\n                size=\"sm\"\n                ref={stepRef}\n                className=\"rounded-full\"\n              >\n                {currentStep === steps.length - 1 ? \"Done\" : \"Next\"}\n              </Button>\n            </div>\n            {/* Don't show again checkbox */}\n          </div>\n          <div className=\"flex items-center space-x-2 pb-4 px-4\">\n            <Checkbox\n              id=\"skipNextTime\"\n              checked={skipNextTime}\n              onCheckedChange={(checked) => setSkipNextTime(checked as boolean)}\n            />\n            <label\n              htmlFor=\"skipNextTime\"\n              className=\"text-sm text-muted-foreground\"\n            >\n              Don't show this again\n            </label>\n          </div>\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  )\n}\n\nexport function IntroDisclosure({\n  steps,\n  open,\n  setOpen,\n  featureId,\n  onComplete,\n  onSkip,\n  showProgressBar = true,\n  forceVariant,\n}: FeatureDisclosureProps) {\n  const [currentStep, setCurrentStep] = React.useState(0)\n  const [completedSteps, setCompletedSteps] = React.useState<number[]>([0])\n  const [direction, setDirection] = React.useState<1 | -1>(1)\n  const isDesktopQuery = useMediaQuery(\"(min-width: 768px)\")\n  const isDesktop = forceVariant ? forceVariant === \"desktop\" : isDesktopQuery\n  const { isVisible, hideFeature } = useFeatureVisibility(featureId)\n  const stepRef = React.useRef<HTMLButtonElement>(null)\n\n  // Close the dialog if feature is hidden\n  React.useEffect(() => {\n    if (!isVisible) {\n      setOpen(false)\n    }\n  }, [isVisible, setOpen])\n\n  // Focus management\n  React.useEffect(() => {\n    if (open && stepRef.current) {\n      stepRef.current.focus()\n    }\n  }, [open, currentStep])\n\n  // Early return if feature should be hidden\n  if (!isVisible || !open) {\n    return null\n  }\n\n  const handleNext = () => {\n    setDirection(1)\n    setCompletedSteps((prev) =>\n      prev.includes(currentStep) ? prev : [...prev, currentStep]\n    )\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1)\n    } else {\n      setOpen(false)\n      onComplete?.()\n    }\n  }\n\n  const handlePrevious = () => {\n    setDirection(-1)\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1)\n    }\n  }\n\n  const handleSkip = () => {\n    setOpen(false)\n    onSkip?.()\n  }\n\n  const handleStepSelect = (index: number) => {\n    setDirection(index > currentStep ? 1 : -1)\n    // Mark all steps up to and including the selected step as completed\n    setCompletedSteps((prev) => {\n      const newCompletedSteps = new Set(prev)\n      // If moving forward, mark all steps up to the selected one as completed\n      if (index > currentStep) {\n        for (let i = currentStep; i <= index; i++) {\n          newCompletedSteps.add(i)\n        }\n      }\n      return Array.from(newCompletedSteps)\n    })\n    setCurrentStep(index)\n  }\n\n  const handleSwipe = (swipeDirection: \"left\" | \"right\") => {\n    if (swipeDirection === \"left\") {\n      handleNext()\n    } else {\n      handlePrevious()\n    }\n  }\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === \"ArrowRight\" || event.key === \"ArrowDown\") {\n      handleNext()\n    } else if (event.key === \"ArrowLeft\" || event.key === \"ArrowUp\") {\n      handlePrevious()\n    }\n  }\n\n  const { handleDragEnd } = useSwipe(handleSwipe)\n\n  if (isDesktop) {\n    return (\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent\n          className=\"max-w-5xl p-0 gap-0 overflow-hidden \"\n          onKeyDown={handleKeyDown}\n        >\n          <DialogHeader className=\"p-6 space-y-2 bg-muted border-b border-border\">\n            <DialogTitle>Feature Tour</DialogTitle>\n            {showProgressBar && (\n              <div className=\"flex mt-2 w-full justify-center  \">\n                <Progress\n                  value={((currentStep + 1) / steps.length) * 100}\n                  className=\"  h-1 \"\n                />\n              </div>\n            )}\n          </DialogHeader>\n\n          <div className=\"grid grid-cols-2 h-full\">\n            <div className=\"p-2 pr-[18px] \">\n              <StepContent\n                steps={steps}\n                currentStep={currentStep}\n                onSkip={handleSkip}\n                onNext={handleNext}\n                onPrevious={handlePrevious}\n                hideFeature={hideFeature}\n                completedSteps={completedSteps}\n                onStepSelect={handleStepSelect}\n                direction={direction}\n                isDesktop={isDesktop}\n                stepRef={stepRef}\n              />\n            </div>\n            <AnimatePresence mode=\"wait\" initial={false}>\n              <StepPreview\n                key={currentStep}\n                step={steps[currentStep]}\n                direction={direction}\n              />\n            </AnimatePresence>\n          </div>\n        </DialogContent>\n      </Dialog>\n    )\n  }\n\n  return (\n    <Drawer open={open} onOpenChange={setOpen}>\n      <DrawerContent className=\"h-[95vh] max-h-[95vh] \">\n        <motion.div\n          drag=\"x\"\n          dragConstraints={{ left: 0, right: 0 }}\n          onDragEnd={handleDragEnd}\n          onKeyDown={handleKeyDown}\n          className=\"h-full flex flex-col max-w-3xl mx-auto\"\n        >\n          <DrawerHeader className=\"text-left  pb-4 space-y-4\">\n            {showProgressBar && (\n              <Progress\n                value={((currentStep + 1) / steps.length) * 100}\n                className=\"mb-4\"\n              />\n            )}\n            <DrawerTitle>{steps[currentStep]?.title}</DrawerTitle>\n          </DrawerHeader>\n\n          <div className=\"flex-1 overflow-y-auto\">\n            <div className=\"p-4 space-y-4 pb-32\">\n              {/* Step tabs */}\n              <div className=\"grid grid-cols-2 gap-2 mb-6\">\n                {steps.map((step, index) => (\n                  <StepTab\n                    key={index}\n                    step={step}\n                    isActive={currentStep === index}\n                    onClick={() => handleStepSelect(index)}\n                    isCompleted={completedSteps.includes(index)}\n                  />\n                ))}\n              </div>\n              {/* Preview */}\n              <div className=\"relative aspect-[16/9] ring-2 ring-border ring-offset-8 ring-offset-background rounded-lg overflow-hidden\">\n                <StepPreview step={steps[currentStep]} direction={direction} />\n              </div>\n\n              {/* Step content */}\n              <div className=\"space-y-4 border border-border p-3 rounded-lg\">\n                <p className=\"text-muted-foreground\">\n                  {steps[currentStep]?.short_description}\n                </p>\n                {steps[currentStep]?.action && (\n                  <Button\n                    asChild\n                    className=\"w-full\"\n                    variant={\n                      steps[currentStep]?.action?.href ? \"outline\" : \"default\"\n                    }\n                  >\n                    {steps[currentStep]?.action?.href ? (\n                      <a\n                        href={steps[currentStep]?.action?.href}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center justify-center gap-2\"\n                      >\n                        {steps[currentStep]?.action?.label}\n                        <ExternalLinkIcon className=\"h-4 w-4\" />\n                      </a>\n                    ) : (\n                      <button onClick={steps[currentStep]?.action?.onClick}>\n                        {steps[currentStep]?.action?.label}\n                      </button>\n                    )}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Fixed bottom navigation */}\n          <div className=\"absolute bottom-0 left-0 right-0 border-t bg-background\">\n            <div className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={onSkip}\n                  className=\"text-muted-foreground hover:bg-card rounded-full\"\n                >\n                  Skip all\n                </Button>\n                <div className=\"space-x-2\">\n                  {currentStep > 0 && (\n                    <Button\n                      onClick={handlePrevious}\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"rounded-full hover:bg-transparent\"\n                    >\n                      Previous\n                    </Button>\n                  )}\n                  <Button\n                    onClick={() => {\n                      handleNext()\n                    }}\n                    size=\"sm\"\n                    ref={stepRef}\n                    className=\"rounded-full\"\n                  >\n                    {currentStep === steps.length - 1 ? \"Done\" : \"Next\"}\n                  </Button>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"skipNextTime\"\n                  onCheckedChange={(checked) => {\n                    hideFeature()\n                  }}\n                />\n                <label\n                  htmlFor=\"skipNextTime\"\n                  className=\"text-sm text-muted-foreground\"\n                >\n                  Don't show this again\n                </label>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport default IntroDisclosure\n"
    }
  ],
  "type": "components:ui"
}