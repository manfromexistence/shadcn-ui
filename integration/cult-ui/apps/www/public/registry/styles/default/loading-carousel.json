{
  "name": "loading-carousel",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "name": "loading-carousel.tsx",
      "content": "// npm i embla-carousel-autoplay framer-motion lucide-react\n// npx shadcn@latest add carousel\n\"use client\"\n\nimport React, { useCallback, useEffect, useState, type JSX } from \"react\"\nimport Image from \"next/image\"\nimport Autoplay from \"embla-carousel-autoplay\"\nimport { ChevronRight } from \"lucide-react\"\nimport {\n  AnimatePresence,\n  MotionProps,\n  Variants,\n  motion,\n  useAnimation,\n} from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n  type CarouselApi,\n} from \"@/components/ui/carousel\"\n\ninterface Tip {\n  text: string\n  image: string\n  url?: string\n}\n\ninterface LoadingCarouselProps {\n  tips?: Tip[]\n  className?: string\n  autoplayInterval?: number\n  showNavigation?: boolean\n  showIndicators?: boolean\n  showProgress?: boolean\n  aspectRatio?: \"video\" | \"square\" | \"wide\"\n  textPosition?: \"top\" | \"bottom\"\n  onTipChange?: (index: number) => void\n  backgroundTips?: boolean\n  backgroundGradient?: boolean\n  shuffleTips?: boolean\n  animateText?: boolean\n}\n\nconst defaultTips: Tip[] = [\n  {\n    text: \"Backend snippets. Shadcn style headless components.. but for your backend.\",\n    image: \"/placeholders/cult-snips.png\",\n    url: \"https://www.newcult.co/backend\",\n  },\n  {\n    text: \"Create your first directory app today. AI batch scripts to process 100s of urls in seconds.\",\n    image: \"/placeholders/cult-dir.png\",\n    url: \"https://www.newcult.co/templates/cult-seo\",\n  },\n  {\n    text: \"Cult landing page template. Framer motion, shadcn, and tailwind.\",\n    image: \"/placeholders/cult-rune.png\",\n    url: \"https://www.newcult.co/templates/cult-landing-page\",\n  },\n  {\n    text: \"Vector embeddings, semantic search, and chat based vector retrieval on easy mode.\",\n    image: \"/placeholders/cult-manifest.png\",\n    url: \"https://www.newcult.co/templates/manifest\",\n  },\n  {\n    text: \"SEO analysis app. Scraping, analysis, insights, and AI recommendations.\",\n    image: \"/placeholders/cult-seo.png\",\n    url: \"https://www.newcult.co/templates/cult-seo\",\n  },\n]\n\nfunction shuffleArray<T>(array: T[]): T[] {\n  const shuffled = [...array]\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]\n  }\n  return shuffled\n}\n\nconst carouselVariants: Variants = {\n  enter: (direction: number) => ({\n    x: direction > 0 ? \"100%\" : \"-100%\",\n    opacity: 0,\n  }),\n  center: {\n    x: 0,\n    opacity: 1,\n  },\n  exit: (direction: number) => ({\n    x: direction < 0 ? \"100%\" : \"-100%\",\n    opacity: 0,\n  }),\n}\n\nconst textVariants: Variants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: { opacity: 1, y: 0, transition: { delay: 0.3, duration: 0.5 } },\n}\n\nconst aspectRatioClasses = {\n  video: \"aspect-video\",\n  square: \"aspect-square\",\n  wide: \"aspect-[2/1]\",\n}\n\nexport function LoadingCarousel({\n  onTipChange,\n  className,\n  tips = defaultTips,\n  showProgress = true,\n  aspectRatio = \"video\",\n  showNavigation = false,\n  showIndicators = true,\n  backgroundTips = false,\n  textPosition = \"bottom\",\n  autoplayInterval = 4500,\n  backgroundGradient = false,\n  shuffleTips = false,\n  animateText = true,\n}: LoadingCarouselProps) {\n  const [progress, setProgress] = useState(0)\n  const [api, setApi] = useState<CarouselApi>()\n  const [current, setCurrent] = useState(0)\n  const [direction, setDirection] = useState(0)\n  const controls = useAnimation()\n  const [displayTips] = useState(() =>\n    shuffleTips ? shuffleArray(tips) : tips\n  )\n\n  const autoplay = Autoplay({\n    delay: autoplayInterval,\n    stopOnInteraction: false,\n  })\n\n  useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    setCurrent(api.selectedScrollSnap())\n    setDirection(\n      api.scrollSnapList().indexOf(api.selectedScrollSnap()) - current\n    )\n\n    const onSelect = () => {\n      const newIndex = api.selectedScrollSnap()\n      setCurrent(newIndex)\n      setDirection(api.scrollSnapList().indexOf(newIndex) - current)\n      onTipChange?.(newIndex)\n    }\n\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api.off(\"select\", onSelect)\n    }\n  }, [api, current, onTipChange])\n\n  useEffect(() => {\n    if (!showProgress) return\n\n    const timer = setInterval(() => {\n      setProgress((oldProgress) => {\n        if (oldProgress === 100) {\n          return 0\n        }\n        const diff = 2 // Constant increment for smoother progress\n        return Math.min(oldProgress + diff, 100)\n      })\n    }, autoplayInterval / 50)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [showProgress, autoplayInterval])\n\n  useEffect(() => {\n    if (progress === 100) {\n      controls.start({ scaleX: 0 }).then(() => {\n        setProgress(0)\n        controls.set({ scaleX: 1 })\n      })\n    } else {\n      controls.start({ scaleX: progress / 100 })\n    }\n  }, [progress, controls])\n\n  const handleSelect = useCallback(\n    (index: number) => {\n      api?.scrollTo(index)\n    },\n    [api]\n  )\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.8, ease: \"easeOut\" }}\n      className={cn(\n        \"w-full max-w-6xl mx-auto rounded-lg bg-muted shadow-[0px_1px_1px_0px_rgba(0,0,0,0.05),0px_1px_1px_0px_rgba(255,252,240,0.5)_inset,0px_0px_0px_1px_hsla(0,0%,100%,0.1)_inset,0px_0px_1px_0px_rgba(28,27,26,0.5)]\",\n        className\n      )}\n    >\n      <div className=\"w-full overflow-hidden rounded-lg\">\n        <Carousel\n          setApi={setApi}\n          plugins={[autoplay]}\n          className=\"w-full relative\"\n          opts={{\n            loop: true,\n          }}\n        >\n          <CarouselContent>\n            <AnimatePresence initial={false} custom={direction}>\n              {(displayTips || []).map((tip, index) => (\n                <CarouselItem key={index}>\n                  <motion.div\n                    variants={carouselVariants}\n                    initial=\"enter\"\n                    animate=\"center\"\n                    exit=\"exit\"\n                    custom={direction}\n                    transition={{ duration: 0.8, ease: \"easeInOut\" }}\n                    className={`relative ${aspectRatioClasses[aspectRatio]} w-full overflow-hidden`}\n                  >\n                    <Image\n                      src={tip.image}\n                      alt={`Visual representation for tip: ${tip.text}`}\n                      fill\n                      className=\"object-cover\"\n                      priority\n                    />\n                    {backgroundGradient && (\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/90 via-black/20 to-transparent\" />\n                    )}\n\n                    {backgroundTips ? (\n                      <motion.div\n                        variants={textVariants}\n                        initial=\"hidden\"\n                        animate=\"visible\"\n                        className={`absolute ${\n                          textPosition === \"top\" ? \"top-0\" : \"bottom-0\"\n                        } left-0 right-0 p-4 sm:p-6 md:p-8`}\n                      >\n                        {displayTips[current]?.url ? (\n                          <a\n                            href={displayTips[current]?.url}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            <p className=\"text-white text-center md:text-left text-base sm:text-lg md:text-xl lg:text-2xl lg:font-bold tracking-tight font-medium leading-relaxed\">\n                              {tip.text}\n                            </p>\n                          </a>\n                        ) : (\n                          <p className=\"text-white text-center md:text-left text-base sm:text-lg md:text-xl lg:text-2xl lg:font-bold tracking-tight font-medium leading-relaxed\">\n                            {tip.text}\n                          </p>\n                        )}\n                      </motion.div>\n                    ) : null}\n                  </motion.div>\n                </CarouselItem>\n              ))}\n            </AnimatePresence>\n          </CarouselContent>\n          {showNavigation && (\n            <>\n              <CarouselPrevious className=\"absolute left-2 top-1/2 -translate-y-1/2\" />\n              <CarouselNext className=\"absolute right-2 top-1/2 -translate-y-1/2\" />\n            </>\n          )}\n        </Carousel>\n        <div\n          className={cn(\n            \"bg-muted p-4 \",\n            showIndicators && !backgroundTips ? \"lg:py-2 lg:px-4 \" : \"\"\n          )}\n        >\n          <div\n            className={cn(\n              \"flex flex-col sm:flex-row items-center justify-between space-y-2 sm:space-y-0\",\n              showIndicators && !backgroundTips\n                ? \"sm:flex-col space-y-2 items-start gap-3\"\n                : \"\"\n            )}\n          >\n            {showIndicators && (\n              <div className=\"flex space-x-2 overflow-x-auto pb-2 sm:pb-0 w-full sm:w-auto\">\n                {(displayTips || []).map((_, index) => (\n                  <motion.button\n                    key={index}\n                    className={`h-1 w-8 flex-shrink-0 rounded-full ${\n                      index === current ? \"bg-muted\" : \"bg-primary\"\n                    }`}\n                    initial={false}\n                    animate={{\n                      backgroundColor:\n                        index === current ? \"#3D3D3E\" : \"#E6E6E4\",\n                    }}\n                    transition={{ duration: 0.5 }}\n                    onClick={() => handleSelect(index)}\n                    aria-label={`Go to tip ${index + 1}`}\n                  />\n                ))}\n              </div>\n            )}\n            <div className=\"flex items-center space-x-2 text-primary whitespace-nowrap\">\n              {backgroundTips ? (\n                <span className=\"text-sm font-medium\">\n                  Tip {current + 1}/{displayTips?.length || 0}\n                </span>\n              ) : (\n                <div className=\"flex flex-col\">\n                  {displayTips[current]?.url ? (\n                    <a\n                      href={displayTips[current]?.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-base lg:text-2xl xl:font-semibold tracking-tight font-medium\"\n                    >\n                      {animateText ? (\n                        <TextScramble\n                          key={displayTips[current]?.text}\n                          duration={1.2}\n                          characterSet=\". \"\n                        >\n                          {displayTips[current]?.text}\n                        </TextScramble>\n                      ) : (\n                        displayTips[current]?.text\n                      )}\n                    </a>\n                  ) : (\n                    <span className=\"text-base lg:text-2xl xl:font-semibold tracking-tight font-medium\">\n                      {animateText ? (\n                        <TextScramble\n                          key={displayTips[current]?.text}\n                          duration={1.2}\n                          characterSet=\". \"\n                        >\n                          {displayTips[current]?.text}\n                        </TextScramble>\n                      ) : (\n                        displayTips[current]?.text\n                      )}\n                    </span>\n                  )}\n                </div>\n              )}\n              {backgroundTips && <ChevronRight className=\"w-4 h-4\" />}\n            </div>\n          </div>\n          {showProgress && (\n            <motion.div\n              initial={{ scaleX: 0 }}\n              animate={controls}\n              transition={{ duration: 0.5, ease: \"linear\" }}\n              className=\"h-1 bg-muted origin-left mt-2\"\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  )\n}\n\n// Credit -> https://motion-primitives.com/docs/text-scramble\n// https://x.com/Ibelick\ntype TextScrambleProps = {\n  children: string\n  duration?: number\n  speed?: number\n  characterSet?: string\n  as?: React.ElementType\n  className?: string\n  trigger?: boolean\n  onScrambleComplete?: () => void\n} & MotionProps\n\nconst defaultChars =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n\nfunction TextScramble({\n  children,\n  duration = 0.8,\n  speed = 0.04,\n  characterSet = defaultChars,\n  className,\n  as: Component = \"p\",\n  trigger = true,\n  onScrambleComplete,\n  ...props\n}: TextScrambleProps) {\n  const MotionComponent = motion.create(\n    Component as keyof JSX.IntrinsicElements\n  )\n  const [displayText, setDisplayText] = useState(children)\n  const [isAnimating, setIsAnimating] = useState(false)\n  const text = children\n\n  const scramble = async () => {\n    if (isAnimating) return\n    setIsAnimating(true)\n\n    const steps = duration / speed\n    let step = 0\n\n    const interval = setInterval(() => {\n      let scrambled = \"\"\n      const progress = step / steps\n\n      for (let i = 0; i < text.length; i++) {\n        if (text[i] === \" \") {\n          scrambled += \" \"\n          continue\n        }\n\n        if (progress * text.length > i) {\n          scrambled += text[i]\n        } else {\n          scrambled +=\n            characterSet[Math.floor(Math.random() * characterSet.length)]\n        }\n      }\n\n      setDisplayText(scrambled)\n      step++\n\n      if (step > steps) {\n        clearInterval(interval)\n        setDisplayText(text)\n        setIsAnimating(false)\n        onScrambleComplete?.()\n      }\n    }, speed * 1000)\n  }\n\n  useEffect(() => {\n    if (!trigger) return\n\n    scramble()\n  }, [trigger])\n\n  return (\n    <MotionComponent className={className} {...props}>\n      {displayText}\n    </MotionComponent>\n  )\n}\n\nexport default LoadingCarousel\n"
    }
  ],
  "type": "components:ui"
}